//
// Generated by JTB 1.2.2
//

package com.mindbox.pe.server.parser.jtb.rule.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> "$create"
 * f1 -> ( "," ArgumentLiteral() )*
 * f2 -> ","
 * f3 -> "create$"
 * </PRE>
 */
public class ListCreationArguments implements Node {
   private Node parent;
   public NodeToken f0;
   public NodeListOptional f1;
   public NodeToken f2;
   public NodeToken f3;

   public ListCreationArguments(NodeToken n0, NodeListOptional n1, NodeToken n2, NodeToken n3) {
      f0 = n0;
      if ( f0 != null ) f0.setParent(this);
      f1 = n1;
      if ( f1 != null ) f1.setParent(this);
      f2 = n2;
      if ( f2 != null ) f2.setParent(this);
      f3 = n3;
      if ( f3 != null ) f3.setParent(this);
   }

   public ListCreationArguments(NodeListOptional n0) {
      f0 = new NodeToken("$create");
      if ( f0 != null ) f0.setParent(this);
      f1 = n0;
      if ( f1 != null ) f1.setParent(this);
      f2 = new NodeToken(",");
      if ( f2 != null ) f2.setParent(this);
      f3 = new NodeToken("create$");
      if ( f3 != null ) f3.setParent(this);
   }

   public void accept(com.mindbox.pe.server.parser.jtb.rule.visitor.Visitor v) {
      v.visit(this);
   }
   public Object accept(com.mindbox.pe.server.parser.jtb.rule.visitor.ObjectVisitor v, Object argu) {
      return v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

