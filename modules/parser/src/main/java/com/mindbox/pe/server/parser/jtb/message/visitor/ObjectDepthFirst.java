//
// Generated by JTB 1.2.2
//

package com.mindbox.pe.server.parser.jtb.message.visitor;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ObjectDepthFirst implements ObjectVisitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Object visit(NodeList n, Object argu) {
      Object _ret=null;
      int _count=0;
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Object visit(NodeListOptional n, Object argu) {
      if ( n.present() ) {
         Object _ret=null;
         int _count=0;
         for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
            ((Node)e.nextElement()).accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Object visit(NodeOptional n, Object argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public Object visit(NodeSequence n, Object argu) {
      Object _ret=null;
      int _count=0;
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Object visit(NodeToken n, Object argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> ( Word() )*
    * f1 -> &lt;EOF&gt;
    * </PRE>
    */
   public Object visit(Message n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;IDENTIFIER&gt;
    *       | ColumnLiteral()
    *       | CellValueLiteral()
    *       | RuleNameLiteral()
    *       | ColumnMessagesLiteral()
    *       | Reference()
    *       | FreeText()
    *       | SingleFreeChar()
    * </PRE>
    */
   public Object visit(Word n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> ( "%column" | "%column " )
    * f1 -> &lt;INTEGER_LITERAL&gt;
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(ColumnLiteral n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "cellValue"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(CellValueLiteral n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "ruleName"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(RuleNameLiteral n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "|"
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> "|"
    * </PRE>
    */
   public Object visit(Reference n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;VALID_FREE_CHAR&gt;
    * </PRE>
    */
   public Object visit(FreeText n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "."
    *       | "%"
    *       | ","
    *       | "("
    *       | ")"
    *       | "|"
    * </PRE>
    */
   public Object visit(SingleFreeChar n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> "%columnMessages"
    * f1 -> "("
    * f2 -> ColumnNumberList()
    * f3 -> ")"
    * f4 -> "%"
    * </PRE>
    */
   public Object visit(ColumnMessagesLiteral n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    * f1 -> ( "," &lt;INTEGER_LITERAL&gt; )*
    * </PRE>
    */
   public Object visit(ColumnNumberList n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
