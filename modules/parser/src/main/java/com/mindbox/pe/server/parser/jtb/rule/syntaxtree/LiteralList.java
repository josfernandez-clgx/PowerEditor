//
// Generated by JTB 1.2.2
//

package com.mindbox.pe.server.parser.jtb.rule.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> "["
 * f1 -> LiteralExpression()
 * f2 -> ( "," LiteralExpression() )*
 * f3 -> "]"
 * </PRE>
 */
public class LiteralList implements Node {
   private Node parent;
   public NodeToken f0;
   public LiteralExpression f1;
   public NodeListOptional f2;
   public NodeToken f3;

   public LiteralList(NodeToken n0, LiteralExpression n1, NodeListOptional n2, NodeToken n3) {
      f0 = n0;
      if ( f0 != null ) f0.setParent(this);
      f1 = n1;
      if ( f1 != null ) f1.setParent(this);
      f2 = n2;
      if ( f2 != null ) f2.setParent(this);
      f3 = n3;
      if ( f3 != null ) f3.setParent(this);
   }

   public LiteralList(LiteralExpression n0, NodeListOptional n1) {
      f0 = new NodeToken("[");
      if ( f0 != null ) f0.setParent(this);
      f1 = n0;
      if ( f1 != null ) f1.setParent(this);
      f2 = n1;
      if ( f2 != null ) f2.setParent(this);
      f3 = new NodeToken("]");
      if ( f3 != null ) f3.setParent(this);
   }

   public void accept(com.mindbox.pe.server.parser.jtb.rule.visitor.Visitor v) {
      v.visit(this);
   }
   public Object accept(com.mindbox.pe.server.parser.jtb.rule.visitor.ObjectVisitor v, Object argu) {
      return v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

