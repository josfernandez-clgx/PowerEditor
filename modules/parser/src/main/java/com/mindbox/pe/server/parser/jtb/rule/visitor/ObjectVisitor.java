//
// Generated by JTB 1.2.2
//

package com.mindbox.pe.server.parser.jtb.rule.visitor;
import com.mindbox.pe.server.parser.jtb.rule.syntaxtree.*;

/**
 * All Object visitors must implement this interface.
 */
public interface ObjectVisitor {
   //
   // Object Auto class visitors
   //
   public Object visit(NodeList n, Object argu);
   public Object visit(NodeListOptional n, Object argu);
   public Object visit(NodeOptional n, Object argu);
   public Object visit(NodeSequence n, Object argu);
   public Object visit(NodeToken n, Object argu);

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> "if"
    * f1 -> LHS()
    * f2 -> "then"
    * f3 -> RHS()
    * f4 -> &lt;EOF&gt;
    * </PRE>
    */
   public Object visit(DeploymentRule n, Object argu);

   /**
    * <PRE>
    * f0 -> OrExpression()
    * </PRE>
    */
   public Object visit(LHS n, Object argu);

   /**
    * <PRE>
    * f0 -> AndExpression()
    * f1 -> ( ( "||" | "or" ) AndExpression() )*
    * </PRE>
    */
   public Object visit(OrExpression n, Object argu);

   /**
    * <PRE>
    * f0 -> ExistExpression()
    * f1 -> ( ( "and" | "&&" ) ExistExpression() )*
    * </PRE>
    */
   public Object visit(AndExpression n, Object argu);

   /**
    * <PRE>
    * f0 -> ExistExpressionPrefix() "with" ConditionalExpression()
    *       | ConditionalExpression()
    * </PRE>
    */
   public Object visit(ExistExpression n, Object argu);

   /**
    * <PRE>
    * f0 -> ( ExistQualifier() | ExistQuantifier() ) Reference() [ &lt;IDENTIFIER&gt; ] [ ExcludingQualifier() ]
    *       | AllQualifier() Reference()
    * </PRE>
    */
   public Object visit(ExistExpressionPrefix n, Object argu);

   /**
    * <PRE>
    * f0 -> ( "exists" | "any" )
    * </PRE>
    */
   public Object visit(ExistQualifier n, Object argu);

   /**
    * <PRE>
    * f0 -> "all"
    * </PRE>
    */
   public Object visit(AllQualifier n, Object argu);

   /**
    * <PRE>
    * f0 -> "at"
    * f1 -> ( "least" | "most" )
    * f2 -> &lt;INTEGER_LITERAL&gt;
    * </PRE>
    */
   public Object visit(ExistQuantifier n, Object argu);

   /**
    * <PRE>
    * f0 -> "excluding"
    * f1 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public Object visit(ExcludingQualifier n, Object argu);

   /**
    * <PRE>
    * f0 -> AdditiveExpression()
    * f1 -> ( ( ConditionalOperator() | MembershipOperator() ) AdditiveExpression() )*
    * </PRE>
    */
   public Object visit(ConditionalExpression n, Object argu);

   /**
    * <PRE>
    * f0 -> "=="
    *       | "!="
    *       | "&gt;"
    *       | "&lt;"
    *       | "&gt;="
    *       | "&lt;="
    *       | "is"
    * </PRE>
    */
   public Object visit(ConditionalOperator n, Object argu);

   /**
    * <PRE>
    * f0 -> "between"
    *       | "in"
    * </PRE>
    */
   public Object visit(MembershipOperator n, Object argu);

   /**
    * <PRE>
    * f0 -> MultiplicativeExpression()
    * f1 -> ( ( "+" | "-" ) MultiplicativeExpression() )*
    * </PRE>
    */
   public Object visit(AdditiveExpression n, Object argu);

   /**
    * <PRE>
    * f0 -> UnaryExpression()
    * f1 -> ( ( "*" | "/" | "%" ) UnaryExpression() )*
    * </PRE>
    */
   public Object visit(MultiplicativeExpression n, Object argu);

   /**
    * <PRE>
    * f0 -> ( "!" | "~" | "+" | "-" ) UnaryExpression()
    *       | PrimaryExpression()
    * </PRE>
    */
   public Object visit(UnaryExpression n, Object argu);

   /**
    * <PRE>
    * f0 -> LiteralExpression()
    *       | LiteralList()
    *       | Reference()
    *       | "(" OrExpression() ")"
    * </PRE>
    */
   public Object visit(PrimaryExpression n, Object argu);

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    *       | BooleanLiteral()
    *       | NullLiteral()
    *       | ColumnLiteral()
    *       | CellValueLiteral()
    *       | ProductIDLiteral()
    * </PRE>
    */
   public Object visit(LiteralExpression n, Object argu);

   /**
    * <PRE>
    * f0 -> "["
    * f1 -> LiteralExpression()
    * f2 -> ( "," LiteralExpression() )*
    * f3 -> "]"
    * </PRE>
    */
   public Object visit(LiteralList n, Object argu);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ( "." &lt;IDENTIFIER&gt; )*
    * </PRE>
    */
   public Object visit(Reference n, Object argu);

   /**
    * <PRE>
    * f0 -> "true"
    *       | "false"
    * </PRE>
    */
   public Object visit(BooleanLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "null"
    * </PRE>
    */
   public Object visit(NullLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "column"
    * f2 -> &lt;INTEGER_LITERAL&gt;
    * f3 -> "%"
    * </PRE>
    */
   public Object visit(ColumnLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "cellValue"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(CellValueLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "productID"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(ProductIDLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> Arguments()
    * </PRE>
    */
   public Object visit(RHS n, Object argu);

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> [ ArgumentList() ]
    * f2 -> ")"
    * </PRE>
    */
   public Object visit(Arguments n, Object argu);

   /**
    * <PRE>
    * f0 -> ArgumentLiteral()
    * f1 -> ( "," ArgumentLiteral() )*
    * </PRE>
    */
   public Object visit(ArgumentList n, Object argu);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    *       | &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    *       | BooleanLiteral()
    *       | NullLiteral()
    *       | ColumnLiteral()
    *       | CellValueLiteral()
    *       | RuleNameLiteral()
    *       | MessageLiteral()
    *       | RowNumberLiteral()
    *       | CategoryIDLiteral()
    *       | CategoryNameLiteral()
    *       | ChannelIDLiteral()
    *       | InvestorIDLiteral()
    *       | ProductIDLiteral()
    *       | LineageIDLiteral()
    *       | ActivationDateLiteral()
    *       | ExpirationDateLiteral()
    *       | ReferenceInArgument()
    *       | ListCreationArguments()
    * </PRE>
    */
   public Object visit(ArgumentLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "|"
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> ( "." &lt;IDENTIFIER&gt; )*
    * f3 -> "|"
    * </PRE>
    */
   public Object visit(ReferenceInArgument n, Object argu);

   /**
    * <PRE>
    * f0 -> "$create"
    * f1 -> ( "," ArgumentLiteral() )*
    * f2 -> ","
    * f3 -> "create$"
    * </PRE>
    */
   public Object visit(ListCreationArguments n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "message"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(MessageLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "ruleName"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(RuleNameLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "rowNumber"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(RowNumberLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "categoryID"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(CategoryIDLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "categoryName"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(CategoryNameLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "channelID"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(ChannelIDLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "investorID"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(InvestorIDLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "lineageID"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(LineageIDLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "activationDate"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(ActivationDateLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "expirationDate"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(ExpirationDateLiteral n, Object argu);

}
