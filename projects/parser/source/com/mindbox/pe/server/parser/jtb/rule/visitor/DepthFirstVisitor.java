//
// Generated by JTB 1.2.2
//

package com.mindbox.pe.server.parser.jtb.rule.visitor;
import com.mindbox.pe.server.parser.jtb.rule.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration e = n.elements(); e.hasMoreElements(); )
         ((Node)e.nextElement()).accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration e = n.elements(); e.hasMoreElements(); )
            ((Node)e.nextElement()).accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration e = n.elements(); e.hasMoreElements(); )
         ((Node)e.nextElement()).accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> "if"
    * f1 -> LHS()
    * f2 -> "then"
    * f3 -> RHS()
    * f4 -> &lt;EOF&gt;
    * </PRE>
    */
   public void visit(DeploymentRule n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * <PRE>
    * f0 -> OrExpression()
    * </PRE>
    */
   public void visit(LHS n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> AndExpression()
    * f1 -> ( ( "||" | "or" ) AndExpression() )*
    * </PRE>
    */
   public void visit(OrExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ExistExpression()
    * f1 -> ( ( "and" | "&&" ) ExistExpression() )*
    * </PRE>
    */
   public void visit(AndExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ExistExpressionPrefix() "with" ConditionalExpression()
    *       | ConditionalExpression()
    * </PRE>
    */
   public void visit(ExistExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( ExistQualifier() | ExistQuantifier() ) Reference() [ &lt;IDENTIFIER&gt; ] [ ExcludingQualifier() ]
    *       | AllQualifier() Reference()
    * </PRE>
    */
   public void visit(ExistExpressionPrefix n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( "exists" | "any" )
    * </PRE>
    */
   public void visit(ExistQualifier n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "all"
    * </PRE>
    */
   public void visit(AllQualifier n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "at"
    * f1 -> ( "least" | "most" )
    * f2 -> &lt;INTEGER_LITERAL&gt;
    * </PRE>
    */
   public void visit(ExistQuantifier n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "excluding"
    * f1 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public void visit(ExcludingQualifier n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> AdditiveExpression()
    * f1 -> ( ( ConditionalOperator() | MembershipOperator() ) AdditiveExpression() )*
    * </PRE>
    */
   public void visit(ConditionalExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "=="
    *       | "!="
    *       | "&gt;"
    *       | "&lt;"
    *       | "&gt;="
    *       | "&lt;="
    *       | "is"
    * </PRE>
    */
   public void visit(ConditionalOperator n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "between"
    *       | "in"
    * </PRE>
    */
   public void visit(MembershipOperator n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> MultiplicativeExpression()
    * f1 -> ( ( "+" | "-" ) MultiplicativeExpression() )*
    * </PRE>
    */
   public void visit(AdditiveExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> UnaryExpression()
    * f1 -> ( ( "*" | "/" | "%" ) UnaryExpression() )*
    * </PRE>
    */
   public void visit(MultiplicativeExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( "!" | "~" | "+" | "-" ) UnaryExpression()
    *       | PrimaryExpression()
    * </PRE>
    */
   public void visit(UnaryExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> LiteralExpression()
    *       | LiteralList()
    *       | Reference()
    *       | "(" OrExpression() ")"
    * </PRE>
    */
   public void visit(PrimaryExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    *       | BooleanLiteral()
    *       | NullLiteral()
    *       | ColumnLiteral()
    *       | CellValueLiteral()
    *       | ProductIDLiteral()
    * </PRE>
    */
   public void visit(LiteralExpression n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "["
    * f1 -> LiteralExpression()
    * f2 -> ( "," LiteralExpression() )*
    * f3 -> "]"
    * </PRE>
    */
   public void visit(LiteralList n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ( "." &lt;IDENTIFIER&gt; )*
    * </PRE>
    */
   public void visit(Reference n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "true"
    *       | "false"
    * </PRE>
    */
   public void visit(BooleanLiteral n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "null"
    * </PRE>
    */
   public void visit(NullLiteral n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "column"
    * f2 -> &lt;INTEGER_LITERAL&gt;
    * f3 -> "%"
    * </PRE>
    */
   public void visit(ColumnLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "cellValue"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(CellValueLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "productID"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(ProductIDLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> Arguments()
    * </PRE>
    */
   public void visit(RHS n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "("
    * f1 -> [ ArgumentList() ]
    * f2 -> ")"
    * </PRE>
    */
   public void visit(Arguments n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ArgumentLiteral()
    * f1 -> ( "," ArgumentLiteral() )*
    * </PRE>
    */
   public void visit(ArgumentList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    *       | &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    *       | BooleanLiteral()
    *       | NullLiteral()
    *       | ColumnLiteral()
    *       | CellValueLiteral()
    *       | RuleNameLiteral()
    *       | MessageLiteral()
    *       | RowNumberLiteral()
    *       | CategoryIDLiteral()
    *       | CategoryNameLiteral()
    *       | ChannelIDLiteral()
    *       | InvestorIDLiteral()
    *       | ProductIDLiteral()
    *       | LineageIDLiteral()
    *       | ActivationDateLiteral()
    *       | ExpirationDateLiteral()
    *       | ReferenceInArgument()
    *       | ListCreationArguments()
    * </PRE>
    */
   public void visit(ArgumentLiteral n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "|"
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> ( "." &lt;IDENTIFIER&gt; )*
    * f3 -> "|"
    * </PRE>
    */
   public void visit(ReferenceInArgument n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "$create"
    * f1 -> ( "," ArgumentLiteral() )*
    * f2 -> ","
    * f3 -> "create$"
    * </PRE>
    */
   public void visit(ListCreationArguments n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "message"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(MessageLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "ruleName"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(RuleNameLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "rowNumber"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(RowNumberLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "categoryID"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(CategoryIDLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "categoryName"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(CategoryNameLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "channelID"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(ChannelIDLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "investorID"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(InvestorIDLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "lineageID"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(LineageIDLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "activationDate"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(ActivationDateLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "expirationDate"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(ExpirationDateLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

}
