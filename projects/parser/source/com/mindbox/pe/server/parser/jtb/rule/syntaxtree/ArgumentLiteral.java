//
// Generated by JTB 1.2.2
//

package com.mindbox.pe.server.parser.jtb.rule.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> &lt;IDENTIFIER&gt;
 *       | &lt;INTEGER_LITERAL&gt;
 *       | &lt;FLOATING_POINT_LITERAL&gt;
 *       | &lt;CHARACTER_LITERAL&gt;
 *       | &lt;STRING_LITERAL&gt;
 *       | BooleanLiteral()
 *       | NullLiteral()
 *       | ColumnLiteral()
 *       | CellValueLiteral()
 *       | RuleNameLiteral()
 *       | MessageLiteral()
 *       | RowNumberLiteral()
 *       | CategoryIDLiteral()
 *       | CategoryNameLiteral()
 *       | ChannelIDLiteral()
 *       | InvestorIDLiteral()
 *       | ProductIDLiteral()
 *       | LineageIDLiteral()
 *       | ActivationDateLiteral()
 *       | ExpirationDateLiteral()
 *       | ReferenceInArgument()
 *       | ListCreationArguments()
 * </PRE>
 */
public class ArgumentLiteral implements Node {
   private Node parent;
   public NodeChoice f0;

   public ArgumentLiteral(NodeChoice n0) {
      f0 = n0;
      if ( f0 != null ) f0.setParent(this);
   }

   public void accept(com.mindbox.pe.server.parser.jtb.rule.visitor.Visitor v) {
      v.visit(this);
   }
   public Object accept(com.mindbox.pe.server.parser.jtb.rule.visitor.ObjectVisitor v, Object argu) {
      return v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

