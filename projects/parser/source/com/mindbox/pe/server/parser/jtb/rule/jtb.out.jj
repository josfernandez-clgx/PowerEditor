//
// Generated by JTB 1.2.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(DeploymentRuleParser)
package com.mindbox.pe.server.parser.jtb.rule;

import com.mindbox.pe.server.parser.jtb.rule.syntaxtree.*;
import java.util.Vector;


public final class DeploymentRuleParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(DeploymentRuleParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

MORE :
{
   "/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN :
{
   <MULTI_LINE_COMMENT: "*/"> : DEFAULT
}

<IN_MULTI_LINE_COMMENT> MORE :
{
   <~[]>
}

TOKEN :
{
   <IF: "if">
   | <THEN: "then">
   | <TRUE: "true">
   | <FALSE: "false">
   | <ANY: "any">
   | <ALL: "all">
   | <AT: "at">
   | <LEAST: "least">
   | <MOST: "most">
   | <EXISTS: "exists">
   | <WITH: "with">
   | <EXCLUDING: "excluding">
   | <NULL: "null">
   | <AND: "and">
   | <OR: "or">
   | <IN: "in">
   | <NIN: "notin">
   | <BETWEEN: "between">
   | <NOT: "not">
   | <IS: "is">
   | <CREATE_BEGIN: "create$">
   | <CREATE_END: "$create">
   | <MESSAGE: "message">
   | <COLUMN: "column">
   | <CELLVALUE: "cellValue">
   | <RULENAME: "ruleName">
   | <ROW_NUMBER: "rowNumber">
   | <CATEGORY_ID: "categoryID">
   | <CATEGORY_NAME: "categoryName">
   | <CHANNEL_ID: "channelID">
   | <INVESTOR_ID: "investorID">
   | <PRODUCT_ID: "productID">
   | <LINEAGE_ID: "lineageID">
   | <ACT_DATE: "activationDate">
   | <EXP_DATE: "expirationDate">
}

TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <CHARACTER_LITERAL: "'" ((~["'", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))) "'">
   | <STRING_LITERAL: "\"" ((~["\"", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "\"">
}

TOKEN :
{
   <IDENTIFIER: (<LETTER> | <COLON>) (<LETTER> | <DIGIT> | <HYPHEN> | <COLON>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
   | <#HYPHEN: ["-", "\u00ad", "\u2212", "\uff0d"]>
   | <#COLON: [":", "\uff1a"]>
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <LBRACKET: "[">
   | <RBRACKET: "]">
   | <COMMA: ",">
   | <DOT: ".">
}

TOKEN :
{
   <AND_SYM: "&&">
   | <OR_SYM: "||">
   | <BANG: "!">
   | <GT: ">">
   | <LT: "<">
   | <EQ: "==">
   | <LE: "<=">
   | <GE: ">=">
   | <NE: "!=">
   | <PLUS: "+">
   | <MINUS: "-">
   | <STAR: "*">
   | <SLASH: "/">
   | <PERCENT: "%">
}

DeploymentRule DeploymentRule() :
{
   NodeToken n0;
   Token n1;
   LHS n2;
   NodeToken n3;
   Token n4;
   RHS n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=LHS()
   n4="then" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=RHS()
   n7=<EOF> { 
      n7.beginColumn++; n7.endColumn++;
      n6 = JTBToolkit.makeNodeToken(n7);
   }
   
   { return new DeploymentRule(n0,n2,n3,n5,n6); }
}

LHS LHS() :
{
   OrExpression n0;

   {
   }
}
{
   n0=OrExpression()
   
   { return new LHS(n0); }
}

OrExpression OrExpression() :
{
   AndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   AndExpression n8;

   {
   }
}
{
   n0=AndExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="||" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="or" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=AndExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OrExpression(n0,n1); }
}

AndExpression AndExpression() :
{
   ExistExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ExistExpression n8;

   {
   }
}
{
   n0=ExistExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="and" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="&&" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=ExistExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AndExpression(n0,n1); }
}

ExistExpression ExistExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   ExistExpressionPrefix n2;
   NodeToken n3;
   Token n4;
   ConditionalExpression n5;
   ConditionalExpression n6;

   {
   }
}
{
   (
      { n1 = new NodeSequence(3); }
      n2=ExistExpressionPrefix()
      { n1.addNode(n2); }
      n4="with" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      n5=ConditionalExpression()
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n6=ConditionalExpression()
      { n0 = new NodeChoice(n6, 1); }
   )
   
   { return new ExistExpression(n0); }
}

ExistExpressionPrefix ExistExpressionPrefix() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   ExistQualifier n3;
   ExistQuantifier n4;
   Reference n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   ExcludingQualifier n10;
   NodeSequence n11;
   AllQualifier n12;
   Reference n13;

   {
   }
}
{
   (
      { n1 = new NodeSequence(4); }
      (
         (
            n3=ExistQualifier()
            { n2 = new NodeChoice(n3, 0); }
         |
            n4=ExistQuantifier()
            { n2 = new NodeChoice(n4, 1); }
         )
         
      )
      { n1.addNode(n2); }
      n5=Reference()
      { n1.addNode(n5); }
      (
         n8=<IDENTIFIER> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
      )?
      { n1.addNode(n6); }
      (
         n10=ExcludingQualifier()
         { n9.addNode(n10); }
      )?
      { n1.addNode(n9); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n11 = new NodeSequence(2); }
      n12=AllQualifier()
      { n11.addNode(n12); }
      n13=Reference()
      { n11.addNode(n13); }
      { n0 = new NodeChoice(n11, 1); }
   )
   
   { return new ExistExpressionPrefix(n0); }
}

ExistQualifier ExistQualifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      (
         n2="exists" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="any" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   
   { return new ExistQualifier(n0); }
}

AllQualifier AllQualifier() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1="all" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new AllQualifier(n0); }
}

ExistQuantifier ExistQuantifier() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1="at" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4="least" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6="most" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   n8=<INTEGER_LITERAL> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ExistQuantifier(n0,n2,n7); }
}

ExcludingQualifier ExcludingQualifier() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
}
{
   n1="excluding" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ExcludingQualifier(n0,n2); }
}

ConditionalExpression ConditionalExpression() :
{
   AdditiveExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   ConditionalOperator n4;
   MembershipOperator n5;
   AdditiveExpression n6;

   {
   }
}
{
   n0=AdditiveExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n4=ConditionalOperator()
            { n3 = new NodeChoice(n4, 0); }
         |
            n5=MembershipOperator()
            { n3 = new NodeChoice(n5, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n6=AdditiveExpression()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ConditionalExpression(n0,n1); }
}

ConditionalOperator ConditionalOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      n2="==" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="!=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=">" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="<" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=">=" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="<=" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="is" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   )
   
   { return new ConditionalOperator(n0); }
}

MembershipOperator MembershipOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2="between" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="in" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new MembershipOperator(n0); }
}

AdditiveExpression AdditiveExpression() :
{
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   MultiplicativeExpression n8;

   {
   }
}
{
   n0=MultiplicativeExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="+" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="-" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=MultiplicativeExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AdditiveExpression(n0,n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
   UnaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   UnaryExpression n10;

   {
   }
}
{
   n0=UnaryExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="*" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="/" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9="%" { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n3); }
      n10=UnaryExpression()
      { n2.addNode(n10); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new MultiplicativeExpression(n0,n1); }
}

UnaryExpression UnaryExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   UnaryExpression n11;
   PrimaryExpression n12;

   {
   }
}
{
   (
      { n1 = new NodeSequence(2); }
      (
         (
            n4="!" { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6="~" { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         |
            n8="+" { n7 = JTBToolkit.makeNodeToken(n8); }
            { n2 = new NodeChoice(n7, 2); }
         |
            n10="-" { n9 = JTBToolkit.makeNodeToken(n10); }
            { n2 = new NodeChoice(n9, 3); }
         )
         
      )
      { n1.addNode(n2); }
      n11=UnaryExpression()
      { n1.addNode(n11); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n12=PrimaryExpression()
      { n0 = new NodeChoice(n12, 1); }
   )
   
   { return new UnaryExpression(n0); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   LiteralExpression n1;
   LiteralList n2;
   Reference n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   OrExpression n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      n1=LiteralExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=LiteralList()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Reference()
      { n0 = new NodeChoice(n3, 2); }
   |
      { n4 = new NodeSequence(3); }
      n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=OrExpression()
      { n4.addNode(n7); }
      n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
      { n4.addNode(n8); }
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new PrimaryExpression(n0); }
}

LiteralExpression LiteralExpression() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   BooleanLiteral n9;
   NullLiteral n10;
   ColumnLiteral n11;
   CellValueLiteral n12;
   ProductIDLiteral n13;

   {
   }
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOATING_POINT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<CHARACTER_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<STRING_LITERAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n9=BooleanLiteral()
      { n0 = new NodeChoice(n9, 4); }
   |
      n10=NullLiteral()
      { n0 = new NodeChoice(n10, 5); }
   |
      LOOKAHEAD(2)
      n11=ColumnLiteral()
      { n0 = new NodeChoice(n11, 6); }
   |
      LOOKAHEAD(2)
      n12=CellValueLiteral()
      { n0 = new NodeChoice(n12, 7); }
   |
      LOOKAHEAD(2)
      n13=ProductIDLiteral()
      { n0 = new NodeChoice(n13, 8); }
   )
   
   { return new LiteralExpression(n0); }
}

LiteralList LiteralList() :
{
   NodeToken n0;
   Token n1;
   LiteralExpression n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   LiteralExpression n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=LiteralExpression()
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=LiteralExpression()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n9="]" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new LiteralList(n0,n2,n3,n8); }
}

Reference Reference() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="." { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new Reference(n0,n2); }
}

BooleanLiteral BooleanLiteral() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2="true" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="false" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new BooleanLiteral(n0); }
}

NullLiteral NullLiteral() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1="null" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new NullLiteral(n0); }
}

ColumnLiteral ColumnLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="column" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<INTEGER_LITERAL> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="%" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new ColumnLiteral(n0,n2,n4,n6); }
}

CellValueLiteral CellValueLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="cellValue" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new CellValueLiteral(n0,n2,n4); }
}

ProductIDLiteral ProductIDLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="productID" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ProductIDLiteral(n0,n2,n4); }
}

RHS RHS() :
{
   NodeToken n0;
   Token n1;
   Arguments n2;

   {
   }
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Arguments()
   
   { return new RHS(n0,n2); }
}

Arguments Arguments() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ArgumentList n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=ArgumentList()
      { n2.addNode(n3); }
   )?
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Arguments(n0,n2,n4); }
}

ArgumentList ArgumentList() :
{
   ArgumentLiteral n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ArgumentLiteral n5;

   {
   }
}
{
   n0=ArgumentLiteral()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ArgumentLiteral()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArgumentList(n0,n1); }
}

ArgumentLiteral ArgumentLiteral() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   BooleanLiteral n11;
   NullLiteral n12;
   ColumnLiteral n13;
   CellValueLiteral n14;
   RuleNameLiteral n15;
   MessageLiteral n16;
   RowNumberLiteral n17;
   CategoryIDLiteral n18;
   CategoryNameLiteral n19;
   ChannelIDLiteral n20;
   InvestorIDLiteral n21;
   ProductIDLiteral n22;
   LineageIDLiteral n23;
   ActivationDateLiteral n24;
   ExpirationDateLiteral n25;
   ReferenceInArgument n26;
   ListCreationArguments n27;

   {
   }
}
{
   (
      n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<INTEGER_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<FLOATING_POINT_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<CHARACTER_LITERAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<STRING_LITERAL> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n11=BooleanLiteral()
      { n0 = new NodeChoice(n11, 5); }
   |
      n12=NullLiteral()
      { n0 = new NodeChoice(n12, 6); }
   |
      LOOKAHEAD(2)
      n13=ColumnLiteral()
      { n0 = new NodeChoice(n13, 7); }
   |
      LOOKAHEAD(2)
      n14=CellValueLiteral()
      { n0 = new NodeChoice(n14, 8); }
   |
      LOOKAHEAD(2)
      n15=RuleNameLiteral()
      { n0 = new NodeChoice(n15, 9); }
   |
      LOOKAHEAD(2)
      n16=MessageLiteral()
      { n0 = new NodeChoice(n16, 10); }
   |
      LOOKAHEAD(2)
      n17=RowNumberLiteral()
      { n0 = new NodeChoice(n17, 11); }
   |
      LOOKAHEAD(2)
      n18=CategoryIDLiteral()
      { n0 = new NodeChoice(n18, 12); }
   |
      LOOKAHEAD(2)
      n19=CategoryNameLiteral()
      { n0 = new NodeChoice(n19, 13); }
   |
      LOOKAHEAD(2)
      n20=ChannelIDLiteral()
      { n0 = new NodeChoice(n20, 14); }
   |
      LOOKAHEAD(2)
      n21=InvestorIDLiteral()
      { n0 = new NodeChoice(n21, 15); }
   |
      LOOKAHEAD(2)
      n22=ProductIDLiteral()
      { n0 = new NodeChoice(n22, 16); }
   |
      LOOKAHEAD(2)
      n23=LineageIDLiteral()
      { n0 = new NodeChoice(n23, 17); }
   |
      LOOKAHEAD(2)
      n24=ActivationDateLiteral()
      { n0 = new NodeChoice(n24, 18); }
   |
      LOOKAHEAD(2)
      n25=ExpirationDateLiteral()
      { n0 = new NodeChoice(n25, 19); }
   |
      n26=ReferenceInArgument()
      { n0 = new NodeChoice(n26, 20); }
   |
      n27=ListCreationArguments()
      { n0 = new NodeChoice(n27, 21); }
   )
   
   { return new ArgumentLiteral(n0); }
}

ReferenceInArgument ReferenceInArgument() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1="|" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7="." { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<IDENTIFIER> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n11="|" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new ReferenceInArgument(n0,n2,n4,n10); }
}

ListCreationArguments ListCreationArguments() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ArgumentLiteral n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   {
   }
}
{
   n1="$create" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(2)
      { n3 = new NodeSequence(2); }
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }

      { n3.addNode(n4); }
      n6=ArgumentLiteral()
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
   n10="create$" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ListCreationArguments(n0,n2,n7,n9); }
}

MessageLiteral MessageLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="message" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new MessageLiteral(n0,n2,n4); }
}

RuleNameLiteral RuleNameLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="ruleName" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new RuleNameLiteral(n0,n2,n4); }
}

RowNumberLiteral RowNumberLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="rowNumber" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new RowNumberLiteral(n0,n2,n4); }
}

CategoryIDLiteral CategoryIDLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="categoryID" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new CategoryIDLiteral(n0,n2,n4); }
}

CategoryNameLiteral CategoryNameLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="categoryName" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new CategoryNameLiteral(n0,n2,n4); }
}

ChannelIDLiteral ChannelIDLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="channelID" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ChannelIDLiteral(n0,n2,n4); }
}

InvestorIDLiteral InvestorIDLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="investorID" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new InvestorIDLiteral(n0,n2,n4); }
}

LineageIDLiteral LineageIDLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="lineageID" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new LineageIDLiteral(n0,n2,n4); }
}

ActivationDateLiteral ActivationDateLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="activationDate" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ActivationDateLiteral(n0,n2,n4); }
}

ExpirationDateLiteral ExpirationDateLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="expirationDate" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ExpirationDateLiteral(n0,n2,n4); }
}
