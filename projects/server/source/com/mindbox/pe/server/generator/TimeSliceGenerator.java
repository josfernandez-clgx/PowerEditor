package com.mindbox.pe.server.generator;

import java.io.PrintWriter;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import com.mindbox.pe.server.model.TimeSlice;
import com.mindbox.pe.server.model.TimeSliceContainer;

/**
 * TimeSlice file generator.
 * @author Geneho Kim
 *
 */
public class TimeSliceGenerator extends AbstractBufferedGenerator {

	private static final String FUNCTION_NAME = "define-instance";
	private static final String CLASS_NAME = "PE:time-slice";
	private static final String ATTRIBUTE_ACTIVATION_DATE = "PE:activation-date";
	private static final String ATTRIBUTE_EXPIRATION_DATE = "PE:expiration-date";
	private static final String NULL_REPLACEMENT = ":UNSPECIFIED";

	public TimeSliceGenerator() {}

	private TimeSlice currentTimeSlice = null;

	private static TimeSliceGenerator instance = null;

	/**
	 * Gets the one and only instance of this class.
	 * 
	 * @return the only instance
	 */
	public static TimeSliceGenerator getInstance() {
		if (instance == null) {
			instance = new TimeSliceGenerator();
		}
		return instance;
	}

	public synchronized void init(OutputController outputController) {
		super.init(outputController);
		currentTimeSlice = null;
	}

	public synchronized void generate(TimeSliceContainer timeSliceContainer) throws RuleGenerationException {
		logger.debug(">>> generate: " + timeSliceContainer);

		if (timeSliceContainer == null) {
			reportError("No date synonym found; add one first!");
			throw new NullPointerException("timeSliceContainer cannot be null");
		}
		if (timeSliceContainer.size() == 0) {
			reportError("No date synonym found; add one first!");
			throw new IllegalArgumentException("timeSliceContainer cannot be empty");
		}

		List<TimeSlice> list = timeSliceContainer.getAll();
		printlnComment("-----------------------------------------------------");
		printlnComment("Time Slice Instances generated by PowerEditor");
		printlnComment("Date: " + new Date());
		printlnComment("Expected Total Count: " + list.size());
		printlnComment("-----------------------------------------------------");
		nextLine();

		try {
			for (Iterator<TimeSlice> iter = list.iterator(); iter.hasNext();) {
				TimeSlice element = iter.next();
				writeInstance(element);
			}
		}
		catch (RuleGenerationException ex) {
			reportError("Failed to generate all time slice instances: " + ex.getMessage());
			throw ex;
		}
	}

	private void writeInstance(TimeSlice timeSlice) throws RuleGenerationException {
		currentTimeSlice = timeSlice;
		logger.debug(">>> writeInstance: " + timeSlice);
		openParan();
		print(FUNCTION_NAME);
		print(' ');
		print(timeSlice.getName());
		print(' ');
		openParan();
		print(CLASS_NAME);
		closeParan();
		nextLineIndent();
		openParan();
		print(ATTRIBUTE_ACTIVATION_DATE);
		print(' ');
		print((timeSlice.getStartDate() == null || timeSlice.getStartDate().getDate() == null
				? NULL_REPLACEMENT
				: RuleGeneratorHelper.toRuleDateTimeString(timeSlice.getStartDate().getDate())));
		closeParan();
		nextLine();
		openParan();
		print(ATTRIBUTE_EXPIRATION_DATE);
		print(' ');
		print((timeSlice.getEndDate() == null || timeSlice.getEndDate().getDate() == null
				? NULL_REPLACEMENT
				: RuleGeneratorHelper.toRuleDateTimeString(timeSlice.getEndDate().getDate())));
		closeParan();
		nextLineOutdent();
		closeParan();
		nextLine();

		incrementObjectCount();
		logger.debug("<<< writeInstance");
		super.writeAll();
	}

	protected String getErrorContext() {
		if (currentTimeSlice != null) {
			StringBuffer errorBuff = new StringBuffer("TimeSlice: ");
			errorBuff.append(currentTimeSlice.getName());
			return errorBuff.toString();
		}
		else {
			return null;
		}
	}

	protected PrintWriter getPrintWriter(String status, OutputController outputController) throws RuleGenerationException {
		return outputController.getTimeSliceWriter(status);
	}

	public synchronized void writeAll() throws RuleGenerationException {
		super.writeAll();
		getOutputController().closeParameterWriters();
	}
}
