/*
 * Defines the JavaCC grammar for Template Messages
 * used in the template definition XML file.
 *
 * @author Geneho Kim, MindBox
 * @copyright 2004. MindBox, LLC. All rights reserved.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MessageParser)


package com.mindbox.pe.server.parser.jtb.message;


public final class MessageParser {
}

PARSER_END(MessageParser)


/*---------------------------------------------------*/
/* Template MESSAGE SPECIFICATION STARTS HERE */
/*---------------------------------------------------*/

/* WHITE SPACE */

SKIP :
{
  "\n"
| "\r"
| "\f"
}


/*---------- RESERVED WORDS AND LITERALS ---------------*/

/* RESERVED WORDS */

TOKEN :
{
  < COLUMN: "column" >
| < COLUMN_SPACE: "column " >
| < CELLVALUE: "cellValue" >
| < RULENAME: "ruleName" >
| < COLUMN_MESSAGES: "columnMessages" >
}

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
}

/* SEPARATORS */

TOKEN :
{
	< PERCENT: "%">
|
   < VBAR: "|">
|
   < PERIOD: "." >
|
   <LPARAN: "(" >
|
   <RPARAN: ")" >
|
   <COMMA: "," >
}


TOKEN :
{
  < IDENTIFIER: (<LETTER>|<COLON>) (<LETTER>|<DIGIT>|<HYPHEN>|<COLON>|<PERIOD>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
|
  < #HYPHEN:
      [
       "\u002D",
       "\u00AD",
       "\u2212",
       "\uFF0D"
      ]
  >
|
  < #COLON:
      [
       "\u003A",
       "\uFF1A"
      ]
  >
}

TOKEN:
{
	< VALID_FREE_CHAR: (~[",","\n","\r","%","|","(",")","\u001f"])+ >
}

/*********************************************************/
/*     MESSAGE GRAMMAR START HERE                */
/*********************************************************/

void Message()  :
{}
{
	( Word() )* <EOF>
}

void Word() :
{}
{
	<INTEGER_LITERAL>
|
	<IDENTIFIER>
|
	LOOKAHEAD(2) ColumnLiteral()
|
	LOOKAHEAD(2) CellValueLiteral()
|
	LOOKAHEAD(2) RuleNameLiteral()
|
	LOOKAHEAD(2) ColumnMessagesLiteral()
|
	LOOKAHEAD(2) Reference()
|
	FreeText()
|
	SingleFreeChar()
}


void ColumnLiteral() :
{}
{
	("%column" | "%column ") <INTEGER_LITERAL> "%"
}

void CellValueLiteral() :
{}
{
	"%" "cellValue" "%"
}

void RuleNameLiteral() :
{}
{
	"%" "ruleName" "%"
}

void Reference() :
{}
{
	"|" <IDENTIFIER> "|"
}
/* 	"|" <IDENTIFIER> ( "." <IDENTIFIER> )* "|" */

void FreeText():
{}
{
	<VALID_FREE_CHAR>
}

void SingleFreeChar():
{}
{
	"."
|
	"%"
|
	","
|
	"("
|
	")"
|
	"|"
}

void ColumnMessagesLiteral():
{}
{
	"%columnMessages" "(" ColumnNumberList() ")" "%"
}

void ColumnNumberList():
{}
{
	<INTEGER_LITERAL> ( "," <INTEGER_LITERAL> )*
}
