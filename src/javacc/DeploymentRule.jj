/*
 * Defines the JavaCC grammar for MindBox Deployment Rules
 * used in the template definition XML file.
 *
 * @author Geneho Kim, MindBox
 * @copyright 2003-2004. MindBox, Inc. All rights reserved.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(DeploymentRuleParser)


package com.mindbox.pe.server.parser.jtb.rule;


public final class DeploymentRuleParser {
}

PARSER_END(DeploymentRuleParser)


/*---------------------------------------------------*/
/* MindBox Deployment Rule SPECIFICATION STARTS HERE */
/*---------------------------------------------------*/

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


/*---------- RESERVED WORDS AND LITERALS ---------------*/

/* RESERVED WORDS */

TOKEN :
{
  < IF: "if" >
| < THEN: "then" >
| < TRUE: "true" >
| < FALSE: "false" >
| < ANY: "any" >
| < ALL: "all" >
| < AT: "at" >
| < LEAST: "least" >
| < MOST: "most" >
| < EXISTS: "exists" >
| < WITH : "with" >
| < EXCLUDING: "excluding" >
| < NULL: "null" >
| < AND: "and" >
| < OR: "or" >
| < IN: "in" >
| < NIN: "notin" >
| < BETWEEN: "between" >
| < NOT: "not" >
| < IS: "is" >
| < CREATE_BEGIN: "create$" >
| < CREATE_END: "$create" >
| < MESSAGE: "message" >
| < COLUMN: "column" >
| < CELLVALUE: "cellValue" >
| < RULENAME: "ruleName" >
| < ROW_NUMBER: "rowNumber" >
| < CATEGORY_ID: "categoryID" >
| < CATEGORY_NAME: "categoryName" >
| < CHANNEL_ID: "channelID" >
| < INVESTOR_ID: "investorID" >
| < PRODUCT_ID: "productID" >
| < LINEAGE_ID: "lineageID" >
| < ACT_DATE: "activationDate" >
| < EXP_DATE: "expirationDate" >
}


/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS = SYMBOLS */

/* TODO: add ':' and '-' as valid identifier char */

TOKEN :
{
  < IDENTIFIER: (<LETTER>|<COLON>) (<LETTER>|<DIGIT>|<HYPHEN>|<COLON>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
|
  < #HYPHEN:
      [
       "\u002D",
       "\u00AD",
       "\u2212",
       "\uFF0D"
      ]
  >
|
  < #COLON:
      [
       "\u003A",
       "\uFF1A"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < COMMA: "," >
| < DOT: "." >
}


/* OPERATORS */

TOKEN :
{
  < AND_SYM: "&&" >
| < OR_SYM: "||" >
| < BANG: "!" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < PERCENT: "%" >
}




/*********************************************************/
/*     DEPLOYMENT RULE GRAMMAR START HERE                */
/*********************************************************/

void DeploymentRule()  :
{}
{
	"if" LHS() "then" RHS() <EOF>
}

void LHS() :
{}
{
	OrExpression()
}


/*void Expression() :
{}
{
	OrExpression()
}*/

void OrExpression() :
{}
{
	AndExpression() ( ( "||" | "or" ) AndExpression() )*
}

void AndExpression() :
{}
{
	ExistExpression() ( ( "and" | "&&" ) ExistExpression() )*
}


void ExistExpression() :
{}
{
	ExistExpressionPrefix() "with" ConditionalExpression() | ConditionalExpression()
}

void ExistExpressionPrefix() :
{}
{
	( ExistQualifier() | ExistQuantifier() ) Reference() [ <IDENTIFIER> ] [ ExcludingQualifier() ]
|
	AllQualifier() Reference()
}

void ExistQualifier() :
{}
{
	( "exists" | "any" )
}

void AllQualifier() :
{}
{
	"all"
}

void ExistQuantifier() :
{}
{
	"at" ("least" | "most" ) <INTEGER_LITERAL>
}

void ExcludingQualifier() :
{}
{
	"excluding" <IDENTIFIER>
}



void ConditionalExpression() :
{}
{
	AdditiveExpression() ( ( ConditionalOperator() | MembershipOperator() ) AdditiveExpression() )*
}


void ConditionalOperator() :
{}
{
	"==" | "!=" | ">" | "<" | ">=" | "<=" | "is"
}

void MembershipOperator() :
{}
{
	"between" | "in"
}

void AdditiveExpression() :
{}
{
	MultiplicativeExpression() ( ( "+" | "-") MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
	UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
	( "!" | "~" | "+" | "-" ) UnaryExpression() 
|
 	PrimaryExpression()
}

void PrimaryExpression() :
{}
{
	LiteralExpression()
|
 	LiteralList()
|
	Reference()
|
	"(" OrExpression() ")"
}


void LiteralExpression() :
{}
{
	<INTEGER_LITERAL>
|
	<FLOATING_POINT_LITERAL>
|
	<CHARACTER_LITERAL>
|
	<STRING_LITERAL>
|
	BooleanLiteral()
|
	NullLiteral()
|
	LOOKAHEAD(2) ColumnLiteral()
|
	LOOKAHEAD(2) CellValueLiteral()
|
	LOOKAHEAD(2) ProductIDLiteral()
}


void LiteralList() :
{}
{
	"[" LiteralExpression() ( "," LiteralExpression() )* "]"
}

void Reference() :
{}
{
	<IDENTIFIER> ( "." <IDENTIFIER> )*
}

void BooleanLiteral() :
{}
{
  "true"
|
  "false"
}

void NullLiteral() :
{}
{
  "null"
}

void ColumnLiteral() :
{}
{
	"%" "column" <INTEGER_LITERAL> "%"
}

void CellValueLiteral() :
{}
{
	"%" "cellValue" "%"
}

void ProductIDLiteral() :
{}
{
	"%" "productID" "%"
}


void RHS() :
{}
{
	<IDENTIFIER> Arguments()
}

void Arguments() :
{}
{
	"(" [ ArgumentList() ] ")"
}

void ArgumentList() :
{}
{
	ArgumentLiteral() ( "," ArgumentLiteral() )*
}


void ArgumentLiteral() :
{}
{
	<IDENTIFIER>
|
	<INTEGER_LITERAL>
|
	<FLOATING_POINT_LITERAL>
|
	<CHARACTER_LITERAL>
|
	<STRING_LITERAL>
|
	BooleanLiteral()
|
	NullLiteral()
|
	LOOKAHEAD(2) ColumnLiteral()
|
	LOOKAHEAD(2) CellValueLiteral()
|
	LOOKAHEAD(2) RuleNameLiteral() 
|
	LOOKAHEAD(2) MessageLiteral()
|
	LOOKAHEAD(2) RowNumberLiteral()
|
	LOOKAHEAD(2) CategoryIDLiteral()
|
	LOOKAHEAD(2) CategoryNameLiteral()
|
	LOOKAHEAD(2) ChannelIDLiteral()
|
	LOOKAHEAD(2) InvestorIDLiteral()
|
	LOOKAHEAD(2) ProductIDLiteral()
|
	LOOKAHEAD(2) LineageIDLiteral()
|
	LOOKAHEAD(2) ActivationDateLiteral()
|
	LOOKAHEAD(2) ExpirationDateLiteral()
|
	ReferenceInArgument()
|
	ListCreationArguments()
}

void ReferenceInArgument() :
{}
{
	"|" <IDENTIFIER> ( "." <IDENTIFIER> )* "|"
}

void ListCreationArguments() :
{}
{
	"$create" ( LOOKAHEAD(2) "," ArgumentLiteral() )* "," "create$"
}

void MessageLiteral() :
{}
{
	"%" "message" "%"
}

void RuleNameLiteral() :
{}
{
	"%" "ruleName" "%"
}

void RowNumberLiteral() : 
{}
{
	"%" "rowNumber" "%"
}

void CategoryIDLiteral() :
{}
{
	"%" "categoryID" "%"
}

void CategoryNameLiteral() :
{}
{
	"%" "categoryName" "%"
}

void ChannelIDLiteral() :
{}
{
	"%" "channelID" "%"
}

void InvestorIDLiteral() :
{}
{
	"%" "investorID" "%"
}

void LineageIDLiteral() :
{}
{
	"%" "lineageID" "%"
}

void ActivationDateLiteral() :
{}
{
	"%" "activationDate" "%"
}

void ExpirationDateLiteral() :
{}
{
	"%" "expirationDate" "%"
}
