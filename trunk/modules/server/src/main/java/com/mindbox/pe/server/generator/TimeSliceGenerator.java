package com.mindbox.pe.server.generator;

import static com.mindbox.pe.common.LogUtil.logDebug;
import static com.mindbox.pe.common.LogUtil.logInfo;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

import com.mindbox.pe.model.deploy.GenerateStats;
import com.mindbox.pe.server.model.TimeSlice;
import com.mindbox.pe.server.model.TimeSliceContainer;

/**
 * TimeSlice file generator.
 * @author Geneho Kim
 *
 */
public class TimeSliceGenerator implements ErrorContextProvider {

	private static final String FUNCTION_NAME = "define-instance";
	private static final String CLASS_NAME = "PE:time-slice";
	private static final String ATTRIBUTE_ACTIVATION_DATE = "PE:activation-date";
	private static final String ATTRIBUTE_EXPIRATION_DATE = "PE:expiration-date";
	private static final String NULL_REPLACEMENT = ":UNSPECIFIED";
	private static final Logger LOG = Logger.getLogger(TimeSliceGenerator.class);

	private TimeSlice currentTimeSlice = null;
	private final BufferedGenerator bufferedGenerator;

	public TimeSliceGenerator(final GenerateStats generateStats, final OutputController outputController) throws RuleGenerationException {
		this.bufferedGenerator = new DefaultBufferedGenerator(generateStats, outputController, outputController.getTimeSliceFile(), this);
	}

	public synchronized void generate(final int percentageAllocation, final TimeSliceContainer timeSliceContainer) throws RuleGenerationException {
		logDebug(LOG, ">>> generate: %d, %s", percentageAllocation, timeSliceContainer);

		if (timeSliceContainer == null) {
			bufferedGenerator.reportError("No date synonym found; add one first!");
			throw new NullPointerException("timeSliceContainer cannot be null");
		}
		if (timeSliceContainer.size() == 0) {
			bufferedGenerator.reportError("No date synonym found; add one first!");
			throw new IllegalArgumentException("timeSliceContainer cannot be empty");
		}

		int percentageAdded = 0;
		try {
			final List<TimeSlice> list = timeSliceContainer.getAll();
			final int percentageToAdd = percentageAllocation / list.size();

			bufferedGenerator.startGeneration();

			bufferedGenerator.printlnComment("-----------------------------------------------------");
			bufferedGenerator.printlnComment("Time Slice Instances generated by PowerEditor");
			bufferedGenerator.printlnComment("Date: " + new Date());
			bufferedGenerator.printlnComment("Expected Total Count: " + list.size());
			bufferedGenerator.printlnComment("-----------------------------------------------------");
			bufferedGenerator.nextLine();

			logDebug(LOG, "Writing %d time slices...", list.size());
			for (TimeSlice element : list) {
				writeInstance(element);

				bufferedGenerator.writeOut();
				bufferedGenerator.getGenerateStats().incrementObjectCount();
				bufferedGenerator.getGenerateStats().addPercentComplete(percentageToAdd);
				percentageAdded += percentageToAdd;
			}

			logInfo(LOG, "Wrote all time slice instances");
		}
		catch (RuleGenerationException ex) {
			bufferedGenerator.reportError("Failed to generate all time slice instances: " + ex.getMessage());
			throw ex;
		}
		catch (Exception e) {
			LOG.error("Failed to generate time slices", e);
			throw new RuleGenerationException("Failed to generate time slices: " + e.getMessage());
		}
		finally {
			bufferedGenerator.endGeneration();
			bufferedGenerator.getGenerateStats().addPercentComplete(percentageAllocation - percentageAdded);
		}
	}

	@Override
	public String getErrorContext() {
		if (currentTimeSlice != null) {
			StringBuilder errorBuff = new StringBuilder("TimeSlice: ");
			errorBuff.append(currentTimeSlice.getName());
			return errorBuff.toString();
		}
		else {
			return null;
		}
	}

	private void writeInstance(TimeSlice timeSlice) throws RuleGenerationException, IOException {
		currentTimeSlice = timeSlice;
		logDebug(LOG, ">>> writeInstance: [%s]", timeSlice);
		bufferedGenerator.openParan();
		bufferedGenerator.print(FUNCTION_NAME);
		bufferedGenerator.print(' ');
		bufferedGenerator.print(timeSlice.getName());
		bufferedGenerator.print(' ');
		bufferedGenerator.openParan();
		bufferedGenerator.print(CLASS_NAME);
		bufferedGenerator.closeParan();
		bufferedGenerator.nextLineIndent();
		bufferedGenerator.openParan();
		bufferedGenerator.print(ATTRIBUTE_ACTIVATION_DATE);
		bufferedGenerator.print(' ');
		bufferedGenerator.print((timeSlice.getStartDate() == null || timeSlice.getStartDate().getDate() == null
				? NULL_REPLACEMENT
				: RuleGeneratorHelper.toRuleDateTimeString(timeSlice.getStartDate().getDate())));
		bufferedGenerator.closeParan();
		bufferedGenerator.nextLine();
		bufferedGenerator.openParan();
		bufferedGenerator.print(ATTRIBUTE_EXPIRATION_DATE);
		bufferedGenerator.print(' ');
		bufferedGenerator.print((timeSlice.getEndDate() == null || timeSlice.getEndDate().getDate() == null
				? NULL_REPLACEMENT
				: RuleGeneratorHelper.toRuleDateTimeString(timeSlice.getEndDate().getDate())));
		bufferedGenerator.closeParan();
		bufferedGenerator.nextLineOutdent();
		bufferedGenerator.closeParan();
		bufferedGenerator.nextLine();
		bufferedGenerator.nextLine();

		LOG.debug("<<< writeInstance");
	}
}
