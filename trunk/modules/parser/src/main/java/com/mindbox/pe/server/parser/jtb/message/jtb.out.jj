//
// Generated by JTB 1.2.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MessageParser)
package com.mindbox.pe.server.parser.jtb.message;

import com.mindbox.pe.server.parser.jtb.message.syntaxtree.*;
import java.util.Vector;


public final class MessageParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MessageParser)

SKIP :
{
   "\n"
   | "\r"
   | "\f"
}

TOKEN :
{
   <COLUMN: "column">
   | <COLUMN_SPACE: "column ">
   | <CELLVALUE: "cellValue">
   | <RULENAME: "ruleName">
   | <COLUMN_MESSAGES: "columnMessages">
}

TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
}

TOKEN :
{
   <PERCENT: "%">
   | <VBAR: "|">
   | <PERIOD: ".">
   | <LPARAN: "(">
   | <RPARAN: ")">
   | <COMMA: ",">
}

TOKEN :
{
   <IDENTIFIER: (<LETTER> | <COLON>) (<LETTER> | <DIGIT> | <HYPHEN> | <COLON> | <PERIOD>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
   | <#HYPHEN: ["-", "\u00ad", "\u2212", "\uff0d"]>
   | <#COLON: [":", "\uff1a"]>
}

TOKEN :
{
   <VALID_FREE_CHAR: (~[",", "\n", "\r", "%", "|", "(", ")", "\u001f"])+>
}

Message Message() :
{
   NodeListOptional n0 = new NodeListOptional();
   Word n1;
   NodeToken n2;
   Token n3;

   {
   }
}
{
   (
      n1=Word()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new Message(n0,n2); }
}

Word Word() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   ColumnLiteral n3;
   CellValueLiteral n4;
   RuleNameLiteral n5;
   ColumnMessagesLiteral n6;
   Reference n7;
   FreeText n8;
   SingleFreeChar n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   FreeText n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n3=ColumnLiteral()
      { n0 = new NodeChoice(n3, 1); }
   |
      LOOKAHEAD(2)
      n4=CellValueLiteral()
      { n0 = new NodeChoice(n4, 2); }
   |
      LOOKAHEAD(2)
      n5=RuleNameLiteral()
      { n0 = new NodeChoice(n5, 3); }
   |
      LOOKAHEAD(2)
      n6=ColumnMessagesLiteral()
      { n0 = new NodeChoice(n6, 4); }
   |
      n7=Reference()
      { n0 = new NodeChoice(n7, 5); }
   |
      n8=FreeText()
      { n0 = new NodeChoice(n8, 6); }
   |
      LOOKAHEAD(2)
      n9=SingleFreeChar()
      { n0 = new NodeChoice(n9, 7); }
   |
      LOOKAHEAD(2)
      { n10 = new NodeSequence(4); }
      n12="(" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n13=FreeText()
      { n10.addNode(n13); }
      n15=")" { n14 = JTBToolkit.makeNodeToken(n15); }
      { n10.addNode(n14); }
      { n0 = new NodeChoice(n10, 8); }
   )
   
   { return new Word(n0); }
}

ColumnLiteral ColumnLiteral() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   (
      (
         n2="%column" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="%column " { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<INTEGER_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="%" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ColumnLiteral(n0,n5,n7); }
}

CellValueLiteral CellValueLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="cellValue" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new CellValueLiteral(n0,n2,n4); }
}

RuleNameLiteral RuleNameLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="ruleName" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="%" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new RuleNameLiteral(n0,n2,n4); }
}

Reference Reference() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="|" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="|" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Reference(n0,n2,n4); }
}

FreeText FreeText() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<VALID_FREE_CHAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FreeText(n0); }
}

SingleFreeChar SingleFreeChar() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   (
      n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="%" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new SingleFreeChar(n0); }
}

ColumnMessagesLiteral ColumnMessagesLiteral() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ColumnNumberList n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1="%columnMessages" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ColumnNumberList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="%" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ColumnMessagesLiteral(n0,n2,n4,n5,n7); }
}

ColumnNumberList ColumnNumberList() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<INTEGER_LITERAL> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new ColumnNumberList(n0,n2); }
}
