/* Generated By:JavaCC: Do not edit this line. DeploymentRuleParserTokenManager.java */
package com.mindbox.pe.server.parser.jtb.rule;

public class DeploymentRuleParserTokenManager implements DeploymentRuleParserConstants {
	public java.io.PrintStream debugStream = System.out;
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}
	private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
		switch (pos) {
			case 0 :
				if ((active1 & 0x1L) != 0L)
					return 4;
				if ((active0 & 0xffffffffe00L) != 0L) {
					jjmatchedKind = 52;
					return 28;
				}
				return -1;
			case 1 :
				if ((active0 & 0xf7fee7f7c00L) != 0L) {
					if (jjmatchedPos != 1) {
						jjmatchedKind = 52;
						jjmatchedPos = 1;
					}
					return 28;
				}
				if ((active0 & 0x8011808200L) != 0L)
					return 28;
				return -1;
			case 2 :
				if ((active0 & 0xa406000L) != 0L)
					return 28;
				if ((active0 & 0xfffe43f1c00L) != 0L) {
					if (jjmatchedPos != 2) {
						jjmatchedKind = 52;
						jjmatchedPos = 2;
					}
					return 28;
				}
				return -1;
			case 3 :
				if ((active0 & 0x2a0c00L) != 0L)
					return 28;
				if ((active0 & 0xfffe6151000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 3;
					return 28;
				}
				return -1;
			case 4 :
				if ((active0 & 0xfffe4140000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 4;
					return 28;
				}
				if ((active0 & 0x2011000L) != 0L)
					return 28;
				return -1;
			case 5 :
				if ((active0 & 0x100040000L) != 0L)
					return 28;
				if ((active0 & 0xffee4100000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 5;
					return 28;
				}
				return -1;
			case 6 :
				if ((active0 & 0xe4000000L) != 0L)
					return 28;
				if ((active0 & 0xffe00100000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 6;
					return 28;
				}
				return -1;
			case 7 :
				if ((active0 & 0xffa00100000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 7;
					return 28;
				}
				if ((active0 & 0x400000000L) != 0L)
					return 28;
				return -1;
			case 8 :
				if ((active0 & 0x34a00100000L) != 0L)
					return 28;
				if ((active0 & 0xcb000000000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 8;
					return 28;
				}
				return -1;
			case 9 :
				if ((active0 & 0x9000000000L) != 0L)
					return 28;
				if ((active0 & 0xc2000000000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 9;
					return 28;
				}
				return -1;
			case 10 :
				if ((active0 & 0xc2000000000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 10;
					return 28;
				}
				return -1;
			case 11 :
				if ((active0 & 0x2000000000L) != 0L)
					return 28;
				if ((active0 & 0xc0000000000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 11;
					return 28;
				}
				return -1;
			case 12 :
				if ((active0 & 0xc0000000000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 12;
					return 28;
				}
				return -1;
			default :
				return -1;
		}
	}
	private final int jjStartNfa_0(int pos, long active0, long active1) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
	}
	private final int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}
	private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}
	private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
			case 33 :
				jjmatchedKind = 67;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
			case 36 :
				return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
			case 37 :
				return jjStopAtPos(0, 78);
			case 38 :
				return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
			case 40 :
				return jjStopAtPos(0, 57);
			case 41 :
				return jjStopAtPos(0, 58);
			case 42 :
				return jjStopAtPos(0, 76);
			case 43 :
				return jjStopAtPos(0, 74);
			case 44 :
				return jjStopAtPos(0, 63);
			case 45 :
				return jjStopAtPos(0, 75);
			case 46 :
				return jjStartNfaWithStates_0(0, 64, 4);
			case 47 :
				jjmatchedKind = 77;
				return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
			case 60 :
				jjmatchedKind = 69;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
			case 61 :
				return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
			case 62 :
				jjmatchedKind = 68;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
			case 91 :
				return jjStopAtPos(0, 61);
			case 93 :
				return jjStopAtPos(0, 62);
			case 97 :
				return jjMoveStringLiteralDfa1_0(0x4000040e000L, 0x0L);
			case 98 :
				return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
			case 99 :
				return jjMoveStringLiteralDfa1_0(0x7320000000L, 0x0L);
			case 101 :
				return jjMoveStringLiteralDfa1_0(0x80000140000L, 0x0L);
			case 102 :
				return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
			case 105 :
				return jjMoveStringLiteralDfa1_0(0x8011000200L, 0x0L);
			case 108 :
				return jjMoveStringLiteralDfa1_0(0x20000010000L, 0x0L);
			case 109 :
				return jjMoveStringLiteralDfa1_0(0x80020000L, 0x0L);
			case 110 :
				return jjMoveStringLiteralDfa1_0(0xa200000L, 0x0L);
			case 111 :
				return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
			case 112 :
				return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
			case 114 :
				return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
			case 116 :
				return jjMoveStringLiteralDfa1_0(0xc00L, 0x0L);
			case 119 :
				return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
			case 123 :
				return jjStopAtPos(0, 59);
			case 124 :
				jjmatchedKind = 80;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
			case 125 :
				return jjStopAtPos(0, 60);
			case 126 :
				return jjStopAtPos(0, 79);
			default :
				return jjMoveNfa_0(0, 0);
		}
	}
	private final int jjMoveStringLiteralDfa1_0(long active0, long active1) {
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1);
			return 1;
		}
		switch (curChar) {
			case 38 :
				if ((active1 & 0x2L) != 0L)
					return jjStopAtPos(1, 65);
				break;
			case 42 :
				if ((active0 & 0x40L) != 0L)
					return jjStopAtPos(1, 6);
				break;
			case 61 :
				if ((active1 & 0x40L) != 0L)
					return jjStopAtPos(1, 70);
				else if ((active1 & 0x80L) != 0L)
					return jjStopAtPos(1, 71);
				else if ((active1 & 0x100L) != 0L)
					return jjStopAtPos(1, 72);
				else if ((active1 & 0x200L) != 0L)
					return jjStopAtPos(1, 73);
				break;
			case 97 :
				return jjMoveStringLiteralDfa2_0(active0, 0x3000001000L, active1, 0L);
			case 99 :
				return jjMoveStringLiteralDfa2_0(active0, 0x40040000000L, active1, 0L);
			case 101 :
				return jjMoveStringLiteralDfa2_0(active0, 0x284010000L, active1, 0L);
			case 102 :
				if ((active0 & 0x200L) != 0L)
					return jjStartNfaWithStates_0(1, 9, 28);
				break;
			case 104 :
				return jjMoveStringLiteralDfa2_0(active0, 0x4000000400L, active1, 0L);
			case 105 :
				return jjMoveStringLiteralDfa2_0(active0, 0x20000080000L, active1, 0L);
			case 108 :
				return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
			case 110 :
				if ((active0 & 0x1000000L) != 0L) {
					jjmatchedKind = 24;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x8000402000L, active1, 0L);
			case 111 :
				return jjMoveStringLiteralDfa2_0(active0, 0x90a020000L, active1, 0L);
			case 114 :
				if ((active0 & 0x800000L) != 0L)
					return jjStartNfaWithStates_0(1, 23, 28);
				return jjMoveStringLiteralDfa2_0(active0, 0x10020000800L, active1, 0L);
			case 115 :
				if ((active0 & 0x10000000L) != 0L)
					return jjStartNfaWithStates_0(1, 28, 28);
				break;
			case 116 :
				if ((active0 & 0x8000L) != 0L)
					return jjStartNfaWithStates_0(1, 15, 28);
				break;
			case 117 :
				return jjMoveStringLiteralDfa2_0(active0, 0x400200000L, active1, 0L);
			case 120 :
				return jjMoveStringLiteralDfa2_0(active0, 0x80000140000L, active1, 0L);
			case 124 :
				if ((active1 & 0x4L) != 0L)
					return jjStopAtPos(1, 66);
				break;
			default :
				break;
		}
		return jjStartNfa_0(0, active0, active1);
	}
	private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(0, old0, old1);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, 0L);
			return 2;
		}
		switch (curChar) {
			case 97 :
				return jjMoveStringLiteralDfa3_0(active0, 0x4000010000L);
			case 99 :
				return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
			case 100 :
				if ((active0 & 0x400000L) != 0L)
					return jjStartNfaWithStates_0(2, 22, 28);
				break;
			case 101 :
				return jjMoveStringLiteralDfa3_0(active0, 0x20000400L);
			case 105 :
				return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
			case 108 :
				if ((active0 & 0x4000L) != 0L)
					return jjStartNfaWithStates_0(2, 14, 28);
				return jjMoveStringLiteralDfa3_0(active0, 0x700201000L);
			case 110 :
				return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
			case 111 :
				return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
			case 112 :
				return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
			case 114 :
				return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
			case 115 :
				return jjMoveStringLiteralDfa3_0(active0, 0x80020000L);
			case 116 :
				if ((active0 & 0x8000000L) != 0L) {
					jjmatchedKind = 27;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x43006080000L);
			case 117 :
				return jjMoveStringLiteralDfa3_0(active0, 0x800L);
			case 118 :
				return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
			case 119 :
				return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
			case 121 :
				if ((active0 & 0x2000L) != 0L)
					return jjStartNfaWithStates_0(2, 13, 28);
				break;
			default :
				break;
		}
		return jjStartNfa_0(1, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, 0L);
			return 3;
		}
		switch (curChar) {
			case 78 :
				return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
			case 97 :
				return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
			case 100 :
				return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
			case 101 :
				if ((active0 & 0x800L) != 0L)
					return jjStartNfaWithStates_0(3, 11, 28);
				return jjMoveStringLiteralDfa4_0(active0, 0x2b440000000L);
			case 104 :
				if ((active0 & 0x80000L) != 0L)
					return jjStartNfaWithStates_0(3, 19, 28);
				break;
			case 105 :
				return jjMoveStringLiteralDfa4_0(active0, 0xc0002000000L);
			case 108 :
				if ((active0 & 0x200000L) != 0L)
					return jjStartNfaWithStates_0(3, 21, 28);
				return jjMoveStringLiteralDfa4_0(active0, 0x200100000L);
			case 110 :
				if ((active0 & 0x400L) != 0L)
					return jjStartNfaWithStates_0(3, 10, 28);
				return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
			case 115 :
				return jjMoveStringLiteralDfa4_0(active0, 0x80051000L);
			case 116 :
				if ((active0 & 0x20000L) != 0L)
					return jjStartNfaWithStates_0(3, 17, 28);
				break;
			case 117 :
				return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
			case 119 :
				return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
			default :
				break;
		}
		return jjStartNfa_0(2, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, 0L);
			return 4;
		}
		switch (curChar) {
			case 78 :
				return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
			case 86 :
				return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
			case 97 :
				return jjMoveStringLiteralDfa5_0(active0, 0x200c0000000L);
			case 101 :
				if ((active0 & 0x1000L) != 0L)
					return jjStartNfaWithStates_0(4, 12, 28);
				return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
			case 103 :
				return jjMoveStringLiteralDfa5_0(active0, 0x3000000000L);
			case 109 :
				return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
			case 110 :
				if ((active0 & 0x2000000L) != 0L)
					return jjStartNfaWithStates_0(4, 25, 28);
				return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
			case 114 :
				return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
			case 115 :
				return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
			case 116 :
				if ((active0 & 0x10000L) != 0L)
					return jjStartNfaWithStates_0(4, 16, 28);
				return jjMoveStringLiteralDfa5_0(active0, 0x20040000L);
			case 117 :
				return jjMoveStringLiteralDfa5_0(active0, 0x10800100000L);
			case 118 :
				return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
			default :
				break;
		}
		return jjStartNfa_0(3, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, 0L);
			return 5;
		}
		switch (curChar) {
			case 97 :
				return jjMoveStringLiteralDfa6_0(active0, 0xc0600000000L);
			case 99 :
				return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
			case 100 :
				return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
			case 101 :
				return jjMoveStringLiteralDfa6_0(active0, 0x4024000000L);
			case 103 :
				return jjMoveStringLiteralDfa6_0(active0, 0x20080000000L);
			case 109 :
				return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
			case 110 :
				if ((active0 & 0x100000000L) != 0L)
					return jjStartNfaWithStates_0(5, 32, 28);
				break;
			case 111 :
				return jjMoveStringLiteralDfa6_0(active0, 0x3000000000L);
			case 115 :
				if ((active0 & 0x40000L) != 0L)
					return jjStartNfaWithStates_0(5, 18, 28);
				break;
			case 116 :
				return jjMoveStringLiteralDfa6_0(active0, 0x8040000000L);
			default :
				break;
		}
		return jjStartNfa_0(4, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(4, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, 0L);
			return 6;
		}
		switch (curChar) {
			case 36 :
				if ((active0 & 0x20000000L) != 0L)
					return jjStartNfaWithStates_0(6, 29, 28);
				break;
			case 98 :
				return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
			case 101 :
				if ((active0 & 0x40000000L) != 0L)
					return jjStartNfaWithStates_0(6, 30, 28);
				else if ((active0 & 0x80000000L) != 0L)
					return jjStartNfaWithStates_0(6, 31, 28);
				return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
			case 105 :
				return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
			case 108 :
				return jjMoveStringLiteralDfa7_0(active0, 0x4200000000L);
			case 109 :
				return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
			case 110 :
				if ((active0 & 0x4000000L) != 0L)
					return jjStartNfaWithStates_0(6, 26, 28);
				break;
			case 111 :
				return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
			case 114 :
				return jjMoveStringLiteralDfa7_0(active0, 0x3000000000L);
			case 116 :
				return jjMoveStringLiteralDfa7_0(active0, 0xd0000000000L);
			default :
				break;
		}
		return jjStartNfa_0(5, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(5, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, 0L);
			return 7;
		}
		switch (curChar) {
			case 73 :
				return jjMoveStringLiteralDfa8_0(active0, 0x34000000000L);
			case 101 :
				if ((active0 & 0x400000000L) != 0L)
					return jjStartNfaWithStates_0(7, 34, 28);
				return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
			case 105 :
				return jjMoveStringLiteralDfa8_0(active0, 0xc0000000000L);
			case 110 :
				return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
			case 114 :
				return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
			case 117 :
				return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
			case 121 :
				return jjMoveStringLiteralDfa8_0(active0, 0x3000000000L);
			default :
				break;
		}
		return jjStartNfa_0(6, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa8_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(6, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0, 0L);
			return 8;
		}
		switch (curChar) {
			case 68 :
				if ((active0 & 0x4000000000L) != 0L)
					return jjStartNfaWithStates_0(8, 38, 28);
				else if ((active0 & 0x10000000000L) != 0L)
					return jjStartNfaWithStates_0(8, 40, 28);
				else if ((active0 & 0x20000000000L) != 0L)
					return jjStartNfaWithStates_0(8, 41, 28);
				break;
			case 73 :
				return jjMoveStringLiteralDfa9_0(active0, 0x9000000000L);
			case 78 :
				return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
			case 101 :
				if ((active0 & 0x200000000L) != 0L)
					return jjStartNfaWithStates_0(8, 33, 28);
				break;
			case 103 :
				if ((active0 & 0x100000L) != 0L)
					return jjStartNfaWithStates_0(8, 20, 28);
				break;
			case 111 :
				return jjMoveStringLiteralDfa9_0(active0, 0xc0000000000L);
			case 114 :
				if ((active0 & 0x800000000L) != 0L)
					return jjStartNfaWithStates_0(8, 35, 28);
				break;
			default :
				break;
		}
		return jjStartNfa_0(7, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa9_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(7, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0, 0L);
			return 9;
		}
		switch (curChar) {
			case 68 :
				if ((active0 & 0x1000000000L) != 0L)
					return jjStartNfaWithStates_0(9, 36, 28);
				else if ((active0 & 0x8000000000L) != 0L)
					return jjStartNfaWithStates_0(9, 39, 28);
				break;
			case 97 :
				return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L);
			case 110 :
				return jjMoveStringLiteralDfa10_0(active0, 0xc0000000000L);
			default :
				break;
		}
		return jjStartNfa_0(8, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(8, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0, 0L);
			return 10;
		}
		switch (curChar) {
			case 68 :
				return jjMoveStringLiteralDfa11_0(active0, 0xc0000000000L);
			case 109 :
				return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
			default :
				break;
		}
		return jjStartNfa_0(9, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa11_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(9, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0, 0L);
			return 11;
		}
		switch (curChar) {
			case 97 :
				return jjMoveStringLiteralDfa12_0(active0, 0xc0000000000L);
			case 101 :
				if ((active0 & 0x2000000000L) != 0L)
					return jjStartNfaWithStates_0(11, 37, 28);
				break;
			default :
				break;
		}
		return jjStartNfa_0(10, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa12_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(10, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, active0, 0L);
			return 12;
		}
		switch (curChar) {
			case 116 :
				return jjMoveStringLiteralDfa13_0(active0, 0xc0000000000L);
			default :
				break;
		}
		return jjStartNfa_0(11, active0, 0L);
	}
	private final int jjMoveStringLiteralDfa13_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(11, old0, 0L);
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(12, active0, 0L);
			return 13;
		}
		switch (curChar) {
			case 101 :
				if ((active0 & 0x40000000000L) != 0L)
					return jjStartNfaWithStates_0(13, 42, 28);
				else if ((active0 & 0x80000000000L) != 0L)
					return jjStartNfaWithStates_0(13, 43, 28);
				break;
			default :
				break;
		}
		return jjStartNfa_0(12, active0, 0L);
	}
	private final void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}
	private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		}
		while (start++ != end);
	}
	private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}
	private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		}
		while (start++ != end);
	}
	private final void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}
	static final long[] jjbitVec0 =
		{ 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec3 = { 0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L };
	static final long[] jjbitVec4 = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };
	static final long[] jjbitVec5 = { 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec6 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L };
	static final long[] jjbitVec7 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L };
	static final long[] jjbitVec8 = { 0x3fffffffffffL, 0x0L, 0x0L, 0x0L };
	static final long[] jjbitVec9 = { 0x4000000L, 0x0L, 0x0L, 0x0L };
	static final long[] jjbitVec10 = { 0x0L, 0x0L, 0x200000000000L, 0xff7fffffff7fffffL };
	static final long[] jjbitVec11 = { 0x40000L, 0x0L, 0x0L, 0x0L };
	static final long[] jjbitVec12 = { 0x4002000L, 0x0L, 0x0L, 0x0L };
	private final int jjMoveNfa_0(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 48;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop : do {
					switch (jjstateSet[--i]) {
						case 0 :
							if ((0x3ff000000000000L & l) != 0L)
								jjCheckNAddStates(0, 6);
							else if ((0x400001000000000L & l) != 0L) {
								if (kind > 52)
									kind = 52;
								jjCheckNAdd(28);
							}
							else if (curChar == 34)
								jjCheckNAddStates(7, 9);
							else if (curChar == 39)
								jjAddStates(10, 11);
							else if (curChar == 46)
								jjCheckNAdd(4);
							if ((0x3fe000000000000L & l) != 0L) {
								if (kind > 44)
									kind = 44;
								jjCheckNAddTwoStates(1, 2);
							}
							else if (curChar == 48) {
								if (kind > 44)
									kind = 44;
								jjCheckNAddStates(12, 14);
							}
							break;
						case 1 :
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 44)
								kind = 44;
							jjCheckNAddTwoStates(1, 2);
							break;
						case 3 :
							if (curChar == 46)
								jjCheckNAdd(4);
							break;
						case 4 :
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 48)
								kind = 48;
							jjCheckNAddStates(15, 17);
							break;
						case 6 :
							if ((0x280000000000L & l) != 0L)
								jjCheckNAdd(7);
							break;
						case 7 :
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 48)
								kind = 48;
							jjCheckNAddTwoStates(7, 8);
							break;
						case 9 :
							if (curChar == 39)
								jjAddStates(10, 11);
							break;
						case 10 :
							if ((0xffffff7fffffdbffL & l) != 0L)
								jjCheckNAdd(11);
							break;
						case 11 :
							if (curChar == 39 && kind > 50)
								kind = 50;
							break;
						case 13 :
							if ((0x8400000000L & l) != 0L)
								jjCheckNAdd(11);
							break;
						case 14 :
							if ((0xff000000000000L & l) != 0L)
								jjCheckNAddTwoStates(15, 11);
							break;
						case 15 :
							if ((0xff000000000000L & l) != 0L)
								jjCheckNAdd(11);
							break;
						case 16 :
							if ((0xf000000000000L & l) != 0L)
								jjstateSet[jjnewStateCnt++] = 17;
							break;
						case 17 :
							if ((0xff000000000000L & l) != 0L)
								jjCheckNAdd(15);
							break;
						case 18 :
							if (curChar == 34)
								jjCheckNAddStates(7, 9);
							break;
						case 19 :
							if ((0xfffffffbffffdbffL & l) != 0L)
								jjCheckNAddStates(7, 9);
							break;
						case 21 :
							if ((0x8400000000L & l) != 0L)
								jjCheckNAddStates(7, 9);
							break;
						case 22 :
							if (curChar == 34 && kind > 51)
								kind = 51;
							break;
						case 23 :
							if ((0xff000000000000L & l) != 0L)
								jjCheckNAddStates(18, 21);
							break;
						case 24 :
							if ((0xff000000000000L & l) != 0L)
								jjCheckNAddStates(7, 9);
							break;
						case 25 :
							if ((0xf000000000000L & l) != 0L)
								jjstateSet[jjnewStateCnt++] = 26;
							break;
						case 26 :
							if ((0xff000000000000L & l) != 0L)
								jjCheckNAdd(24);
							break;
						case 27 :
							if ((0x400001000000000L & l) == 0L)
								break;
							if (kind > 52)
								kind = 52;
							jjCheckNAdd(28);
							break;
						case 28 :
							if ((0x7ff201000000000L & l) == 0L)
								break;
							if (kind > 52)
								kind = 52;
							jjCheckNAdd(28);
							break;
						case 29 :
							if ((0x3ff000000000000L & l) != 0L)
								jjCheckNAddStates(0, 6);
							break;
						case 30 :
							if ((0x3ff000000000000L & l) != 0L)
								jjCheckNAddTwoStates(30, 31);
							break;
						case 31 :
							if (curChar != 46)
								break;
							if (kind > 48)
								kind = 48;
							jjCheckNAddStates(22, 24);
							break;
						case 32 :
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 48)
								kind = 48;
							jjCheckNAddStates(22, 24);
							break;
						case 34 :
							if ((0x280000000000L & l) != 0L)
								jjCheckNAdd(35);
							break;
						case 35 :
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 48)
								kind = 48;
							jjCheckNAddTwoStates(35, 8);
							break;
						case 36 :
							if ((0x3ff000000000000L & l) != 0L)
								jjCheckNAddTwoStates(36, 37);
							break;
						case 38 :
							if ((0x280000000000L & l) != 0L)
								jjCheckNAdd(39);
							break;
						case 39 :
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 48)
								kind = 48;
							jjCheckNAddTwoStates(39, 8);
							break;
						case 40 :
							if ((0x3ff000000000000L & l) != 0L)
								jjCheckNAddStates(25, 27);
							break;
						case 42 :
							if ((0x280000000000L & l) != 0L)
								jjCheckNAdd(43);
							break;
						case 43 :
							if ((0x3ff000000000000L & l) != 0L)
								jjCheckNAddTwoStates(43, 8);
							break;
						case 44 :
							if (curChar != 48)
								break;
							if (kind > 44)
								kind = 44;
							jjCheckNAddStates(12, 14);
							break;
						case 46 :
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 44)
								kind = 44;
							jjCheckNAddTwoStates(46, 2);
							break;
						case 47 :
							if ((0xff000000000000L & l) == 0L)
								break;
							if (kind > 44)
								kind = 44;
							jjCheckNAddTwoStates(47, 2);
							break;
						default :
							break;
					}
				}
				while (i != startsAt);
			}
			else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop : do {
					switch (jjstateSet[--i]) {
						case 0 :
						case 28 :
							if ((0x7fffffe87fffffeL & l) == 0L)
								break;
							if (kind > 52)
								kind = 52;
							jjCheckNAdd(28);
							break;
						case 2 :
							if ((0x100000001000L & l) != 0L && kind > 44)
								kind = 44;
							break;
						case 5 :
							if ((0x2000000020L & l) != 0L)
								jjAddStates(28, 29);
							break;
						case 8 :
							if ((0x5000000050L & l) != 0L && kind > 48)
								kind = 48;
							break;
						case 10 :
							if ((0xffffffffefffffffL & l) != 0L)
								jjCheckNAdd(11);
							break;
						case 12 :
							if (curChar == 92)
								jjAddStates(30, 32);
							break;
						case 13 :
							if ((0x14404410000000L & l) != 0L)
								jjCheckNAdd(11);
							break;
						case 19 :
							if ((0xffffffffefffffffL & l) != 0L)
								jjCheckNAddStates(7, 9);
							break;
						case 20 :
							if (curChar == 92)
								jjAddStates(33, 35);
							break;
						case 21 :
							if ((0x14404410000000L & l) != 0L)
								jjCheckNAddStates(7, 9);
							break;
						case 33 :
							if ((0x2000000020L & l) != 0L)
								jjAddStates(36, 37);
							break;
						case 37 :
							if ((0x2000000020L & l) != 0L)
								jjAddStates(38, 39);
							break;
						case 41 :
							if ((0x2000000020L & l) != 0L)
								jjAddStates(40, 41);
							break;
						case 45 :
							if ((0x100000001000000L & l) != 0L)
								jjCheckNAdd(46);
							break;
						case 46 :
							if ((0x7e0000007eL & l) == 0L)
								break;
							if (kind > 44)
								kind = 44;
							jjCheckNAddTwoStates(46, 2);
							break;
						default :
							break;
					}
				}
				while (i != startsAt);
			}
			else {
				int hiByte = (int) (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop : do {
					switch (jjstateSet[--i]) {
						case 0 :
							if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
								break;
							if (kind > 52)
								kind = 52;
							jjCheckNAdd(28);
							break;
						case 10 :
							if (jjCanMove_0(hiByte, i1, i2, l1, l2))
								jjstateSet[jjnewStateCnt++] = 11;
							break;
						case 19 :
							if (jjCanMove_0(hiByte, i1, i2, l1, l2))
								jjAddStates(7, 9);
							break;
						case 28 :
							if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
								break;
							if (kind > 52)
								kind = 52;
							jjCheckNAdd(28);
							break;
						default :
							break;
					}
				}
				while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 48 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			}
			catch (java.io.IOException e) {
				return curPos;
			}
		}
	}
	private final int jjMoveStringLiteralDfa0_1() {
		switch (curChar) {
			case 42 :
				return jjMoveStringLiteralDfa1_1(0x80L);
			default :
				return 1;
		}
	}
	private final int jjMoveStringLiteralDfa1_1(long active0) {
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			return 1;
		}
		switch (curChar) {
			case 47 :
				if ((active0 & 0x80L) != 0L)
					return jjStopAtPos(1, 7);
				break;
			default :
				return 2;
		}
		return 2;
	}
	static final int[] jjnextStates =
		{
			30,
			31,
			36,
			37,
			40,
			41,
			8,
			19,
			20,
			22,
			10,
			12,
			45,
			47,
			2,
			4,
			5,
			8,
			19,
			20,
			24,
			22,
			32,
			33,
			8,
			40,
			41,
			8,
			6,
			7,
			13,
			14,
			16,
			21,
			23,
			25,
			34,
			35,
			38,
			39,
			42,
			43,
			};
	private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
			case 0 :
				return ((jjbitVec2[i2] & l2) != 0L);
			default :
				if ((jjbitVec0[i1] & l1) != 0L)
					return true;
				return false;
		}
	}
	private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
			case 0 :
				return ((jjbitVec4[i2] & l2) != 0L);
			case 48 :
				return ((jjbitVec5[i2] & l2) != 0L);
			case 49 :
				return ((jjbitVec6[i2] & l2) != 0L);
			case 51 :
				return ((jjbitVec7[i2] & l2) != 0L);
			case 61 :
				return ((jjbitVec8[i2] & l2) != 0L);
			case 255 :
				return ((jjbitVec9[i2] & l2) != 0L);
			default :
				if ((jjbitVec3[i1] & l1) != 0L)
					return true;
				return false;
		}
	}
	private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
			case 0 :
				return ((jjbitVec10[i2] & l2) != 0L);
			case 34 :
				return ((jjbitVec11[i2] & l2) != 0L);
			case 48 :
				return ((jjbitVec5[i2] & l2) != 0L);
			case 49 :
				return ((jjbitVec6[i2] & l2) != 0L);
			case 51 :
				return ((jjbitVec7[i2] & l2) != 0L);
			case 61 :
				return ((jjbitVec8[i2] & l2) != 0L);
			case 255 :
				return ((jjbitVec12[i2] & l2) != 0L);
			default :
				if ((jjbitVec3[i1] & l1) != 0L)
					return true;
				return false;
		}
	}
	public static final String[] jjstrLiteralImages =
		{
			"",
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			"\151\146",
			"\164\150\145\156",
			"\164\162\165\145",
			"\146\141\154\163\145",
			"\141\156\171",
			"\141\154\154",
			"\141\164",
			"\154\145\141\163\164",
			"\155\157\163\164",
			"\145\170\151\163\164\163",
			"\167\151\164\150",
			"\145\170\143\154\165\144\151\156\147",
			"\156\165\154\154",
			"\141\156\144",
			"\157\162",
			"\151\156",
			"\156\157\164\151\156",
			"\142\145\164\167\145\145\156",
			"\156\157\164",
			"\151\163",
			"\143\162\145\141\164\145\44",
			"\44\143\162\145\141\164\145",
			"\155\145\163\163\141\147\145",
			"\143\157\154\165\155\156",
			"\143\145\154\154\126\141\154\165\145",
			"\162\165\154\145\116\141\155\145",
			"\162\157\167\116\165\155\142\145\162",
			"\143\141\164\145\147\157\162\171\111\104",
			"\143\141\164\145\147\157\162\171\116\141\155\145",
			"\143\150\141\156\156\145\154\111\104",
			"\151\156\166\145\163\164\157\162\111\104",
			"\160\162\157\144\165\143\164\111\104",
			"\154\151\156\145\141\147\145\111\104",
			"\141\143\164\151\166\141\164\151\157\156\104\141\164\145",
			"\145\170\160\151\162\141\164\151\157\156\104\141\164\145",
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			"\50",
			"\51",
			"\173",
			"\175",
			"\133",
			"\135",
			"\54",
			"\56",
			"\46\46",
			"\174\174",
			"\41",
			"\76",
			"\74",
			"\75\75",
			"\74\75",
			"\76\75",
			"\41\75",
			"\53",
			"\55",
			"\52",
			"\57",
			"\45",
			"\176",
			"\174",
			};
	public static final String[] lexStateNames = { "DEFAULT", "IN_MULTI_LINE_COMMENT", };
	public static final int[] jjnewLexState =
		{
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			1,
			0,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			-1,
			};
	static final long[] jjtoToken = { 0xfe1d1ffffffffe01L, 0x1ffffL, };
	static final long[] jjtoSkip = { 0xbeL, 0x0L, };
	static final long[] jjtoSpecial = { 0x80L, 0x0L, };
	static final long[] jjtoMore = { 0x140L, 0x0L, };
	protected JavaCharStream input_stream;
	private final int[] jjrounds = new int[48];
	private final int[] jjstateSet = new int[96];
	StringBuffer image;
	int jjimageLen;
	int lengthOfMatch;
	protected char curChar;
	public DeploymentRuleParserTokenManager(JavaCharStream stream) {
		if (JavaCharStream.staticFlag)
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}
	public DeploymentRuleParserTokenManager(JavaCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}
	public void ReInit(JavaCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}
	private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 48; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}
	public void ReInit(JavaCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}
	public void SwitchTo(int lexState) {
		if (lexState >= 2 || lexState < 0)
			throw new TokenMgrError(
				"Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
				TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	public Token getNextToken() {
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop : for (;;) {
			try {
				curChar = input_stream.BeginToken();
			}
			catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				matchedToken.specialToken = specialToken;
				return matchedToken;
			}
			image = null;
			jjimageLen = 0;

			for (;;) {
				switch (curLexState) {
					case 0 :
						try {
							input_stream.backup(0);
							while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
								curChar = input_stream.BeginToken();
						}
						catch (java.io.IOException e1) {
							continue EOFLoop;
						}
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_0();
						break;
					case 1 :
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_1();
						if (jjmatchedPos == 0 && jjmatchedKind > 8) {
							jjmatchedKind = 8;
						}
						break;
				}
				if (jjmatchedKind != 0x7fffffff) {
					if (jjmatchedPos + 1 < curPos)
						input_stream.backup(curPos - jjmatchedPos - 1);
					if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						matchedToken.specialToken = specialToken;
						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						return matchedToken;
					}
					else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
							matchedToken = jjFillToken();
							if (specialToken == null)
								specialToken = matchedToken;
							else {
								matchedToken.specialToken = specialToken;
								specialToken = (specialToken.next = matchedToken);
							}
							SkipLexicalActions(matchedToken);
						}
						else
							SkipLexicalActions(null);
						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						continue EOFLoop;
					}
					jjimageLen += jjmatchedPos + 1;
					if (jjnewLexState[jjmatchedKind] != -1)
						curLexState = jjnewLexState[jjmatchedKind];
					curPos = 0;
					jjmatchedKind = 0x7fffffff;
					try {
						curChar = input_stream.readChar();
						continue;
					}
					catch (java.io.IOException e1) {}
				}
				int error_line = input_stream.getEndLine();
				int error_column = input_stream.getEndColumn();
				String error_after = null;
				boolean EOFSeen = false;
				try {
					input_stream.readChar();
					input_stream.backup(1);
				}
				catch (java.io.IOException e1) {
					EOFSeen = true;
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
					if (curChar == '\n' || curChar == '\r') {
						error_line++;
						error_column = 0;
					}
					else
						error_column++;
				}
				if (!EOFSeen) {
					input_stream.backup(1);
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
				}
				throw new TokenMgrError(
					EOFSeen,
					curLexState,
					error_line,
					error_column,
					error_after,
					curChar,
					TokenMgrError.LEXICAL_ERROR);
			}
		}
	}

	void SkipLexicalActions(Token matchedToken) {
		switch (jjmatchedKind) {
			default :
				break;
		}
	}
}
