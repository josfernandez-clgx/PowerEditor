//
// Generated by JTB 1.2.2
//

package com.mindbox.pe.server.parser.jtb.message.visitor;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration e = n.elements(); e.hasMoreElements(); )
         ((Node)e.nextElement()).accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration e = n.elements(); e.hasMoreElements(); )
            ((Node)e.nextElement()).accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration e = n.elements(); e.hasMoreElements(); )
         ((Node)e.nextElement()).accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> ( Word() )*
    * f1 -> &lt;EOF&gt;
    * </PRE>
    */
   public void visit(Message n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;IDENTIFIER&gt;
    *       | ColumnLiteral()
    *       | CellValueLiteral()
    *       | RuleNameLiteral()
    *       | ColumnMessagesLiteral()
    *       | Reference()
    *       | FreeText()
    *       | SingleFreeChar()
    * </PRE>
    */
   public void visit(Word n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> ( "%column" | "%column " )
    * f1 -> &lt;INTEGER_LITERAL&gt;
    * f2 -> "%"
    * </PRE>
    */
   public void visit(ColumnLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "cellValue"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(CellValueLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "ruleName"
    * f2 -> "%"
    * </PRE>
    */
   public void visit(RuleNameLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "|"
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> "|"
    * </PRE>
    */
   public void visit(Reference n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;VALID_FREE_CHAR&gt;
    * </PRE>
    */
   public void visit(FreeText n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "."
    *       | "%"
    *       | ","
    *       | "("
    *       | ")"
    *       | "|"
    * </PRE>
    */
   public void visit(SingleFreeChar n) {
      n.f0.accept(this);
   }

   /**
    * <PRE>
    * f0 -> "%columnMessages"
    * f1 -> "("
    * f2 -> ColumnNumberList()
    * f3 -> ")"
    * f4 -> "%"
    * </PRE>
    */
   public void visit(ColumnMessagesLiteral n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    * f1 -> ( "," &lt;INTEGER_LITERAL&gt; )*
    * </PRE>
    */
   public void visit(ColumnNumberList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

}
