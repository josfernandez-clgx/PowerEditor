//
// Generated by JTB 1.2.2
//

package com.mindbox.pe.server.parser.jtb.message.visitor;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.CellValueLiteral;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.ColumnLiteral;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.ColumnMessagesLiteral;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.ColumnNumberList;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.FreeText;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.Message;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.NodeList;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.NodeListOptional;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.NodeOptional;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.NodeSequence;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.NodeToken;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.Reference;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.RuleNameLiteral;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.SingleFreeChar;
import com.mindbox.pe.server.parser.jtb.message.syntaxtree.Word;

/**
 * All Object visitors must implement this interface.
 */
public interface ObjectVisitor {
   //
   // Object Auto class visitors
   //
   public Object visit(NodeList n, Object argu);
   public Object visit(NodeListOptional n, Object argu);
   public Object visit(NodeOptional n, Object argu);
   public Object visit(NodeSequence n, Object argu);
   public Object visit(NodeToken n, Object argu);

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> ( Word() )*
    * f1 -> &lt;EOF&gt;
    * </PRE>
    */
   public Object visit(Message n, Object argu);

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;IDENTIFIER&gt;
    *       | ColumnLiteral()
    *       | CellValueLiteral()
    *       | RuleNameLiteral()
    *       | ColumnMessagesLiteral()
    *       | Reference()
    *       | FreeText()
    *       | SingleFreeChar()
    * </PRE>
    */
   public Object visit(Word n, Object argu);

   /**
    * <PRE>
    * f0 -> ( "%column" | "%column " )
    * f1 -> &lt;INTEGER_LITERAL&gt;
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(ColumnLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "cellValue"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(CellValueLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "%"
    * f1 -> "ruleName"
    * f2 -> "%"
    * </PRE>
    */
   public Object visit(RuleNameLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> "|"
    * f1 -> &lt;IDENTIFIER&gt;
    * f2 -> "|"
    * </PRE>
    */
   public Object visit(Reference n, Object argu);

   /**
    * <PRE>
    * f0 -> &lt;VALID_FREE_CHAR&gt;
    * </PRE>
    */
   public Object visit(FreeText n, Object argu);

   /**
    * <PRE>
    * f0 -> "."
    *       | "%"
    *       | ","
    *       | "("
    *       | ")"
    *       | "|"
    * </PRE>
    */
   public Object visit(SingleFreeChar n, Object argu);

   /**
    * <PRE>
    * f0 -> "%columnMessages"
    * f1 -> "("
    * f2 -> ColumnNumberList()
    * f3 -> ")"
    * f4 -> "%"
    * </PRE>
    */
   public Object visit(ColumnMessagesLiteral n, Object argu);

   /**
    * <PRE>
    * f0 -> &lt;INTEGER_LITERAL&gt;
    * f1 -> ( "," &lt;INTEGER_LITERAL&gt; )*
    * </PRE>
    */
   public Object visit(ColumnNumberList n, Object argu);

}
